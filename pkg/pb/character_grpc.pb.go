// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sro/character/character.proto

package pb

import (
	context "context"
	pb "github.com/ShatteredRealms/go-common-service/pkg/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CharacterService_GetCharacter_FullMethodName         = "/sro.character.CharacterService/GetCharacter"
	CharacterService_GetCharacters_FullMethodName        = "/sro.character.CharacterService/GetCharacters"
	CharacterService_GetCharactersForUser_FullMethodName = "/sro.character.CharacterService/GetCharactersForUser"
	CharacterService_CreateCharacter_FullMethodName      = "/sro.character.CharacterService/CreateCharacter"
	CharacterService_DeleteCharacter_FullMethodName      = "/sro.character.CharacterService/DeleteCharacter"
	CharacterService_EditCharacter_FullMethodName        = "/sro.character.CharacterService/EditCharacter"
	CharacterService_AddCharacterPlayTime_FullMethodName = "/sro.character.CharacterService/AddCharacterPlayTime"
)

// CharacterServiceClient is the client API for CharacterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterServiceClient interface {
	GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*Character, error)
	GetCharacters(ctx context.Context, in *GetCharactersRequest, opts ...grpc.CallOption) (*Characters, error)
	GetCharactersForUser(ctx context.Context, in *GetUserCharactersRequest, opts ...grpc.CallOption) (*Characters, error)
	CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*Character, error)
	DeleteCharacter(ctx context.Context, in *pb.TargetId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditCharacter(ctx context.Context, in *EditCharacterRequest, opts ...grpc.CallOption) (*Character, error)
	// Adds the given amount of playtime to the character and returns the total
	// playtime
	AddCharacterPlayTime(ctx context.Context, in *AddPlayTimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type characterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterServiceClient(cc grpc.ClientConnInterface) CharacterServiceClient {
	return &characterServiceClient{cc}
}

func (c *characterServiceClient) GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, CharacterService_GetCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetCharacters(ctx context.Context, in *GetCharactersRequest, opts ...grpc.CallOption) (*Characters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Characters)
	err := c.cc.Invoke(ctx, CharacterService_GetCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetCharactersForUser(ctx context.Context, in *GetUserCharactersRequest, opts ...grpc.CallOption) (*Characters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Characters)
	err := c.cc.Invoke(ctx, CharacterService_GetCharactersForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, CharacterService_CreateCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) DeleteCharacter(ctx context.Context, in *pb.TargetId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CharacterService_DeleteCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) EditCharacter(ctx context.Context, in *EditCharacterRequest, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, CharacterService_EditCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) AddCharacterPlayTime(ctx context.Context, in *AddPlayTimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CharacterService_AddCharacterPlayTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterServiceServer is the server API for CharacterService service.
// All implementations must embed UnimplementedCharacterServiceServer
// for forward compatibility.
type CharacterServiceServer interface {
	GetCharacter(context.Context, *GetCharacterRequest) (*Character, error)
	GetCharacters(context.Context, *GetCharactersRequest) (*Characters, error)
	GetCharactersForUser(context.Context, *GetUserCharactersRequest) (*Characters, error)
	CreateCharacter(context.Context, *CreateCharacterRequest) (*Character, error)
	DeleteCharacter(context.Context, *pb.TargetId) (*emptypb.Empty, error)
	EditCharacter(context.Context, *EditCharacterRequest) (*Character, error)
	// Adds the given amount of playtime to the character and returns the total
	// playtime
	AddCharacterPlayTime(context.Context, *AddPlayTimeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCharacterServiceServer()
}

// UnimplementedCharacterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharacterServiceServer struct{}

func (UnimplementedCharacterServiceServer) GetCharacter(context.Context, *GetCharacterRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) GetCharacters(context.Context, *GetCharactersRequest) (*Characters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacters not implemented")
}
func (UnimplementedCharacterServiceServer) GetCharactersForUser(context.Context, *GetUserCharactersRequest) (*Characters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharactersForUser not implemented")
}
func (UnimplementedCharacterServiceServer) CreateCharacter(context.Context, *CreateCharacterRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) DeleteCharacter(context.Context, *pb.TargetId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) EditCharacter(context.Context, *EditCharacterRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) AddCharacterPlayTime(context.Context, *AddPlayTimeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCharacterPlayTime not implemented")
}
func (UnimplementedCharacterServiceServer) mustEmbedUnimplementedCharacterServiceServer() {}
func (UnimplementedCharacterServiceServer) testEmbeddedByValue()                          {}

// UnsafeCharacterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterServiceServer will
// result in compilation errors.
type UnsafeCharacterServiceServer interface {
	mustEmbedUnimplementedCharacterServiceServer()
}

func RegisterCharacterServiceServer(s grpc.ServiceRegistrar, srv CharacterServiceServer) {
	// If the following call pancis, it indicates UnimplementedCharacterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CharacterService_ServiceDesc, srv)
}

func _CharacterService_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetCharacter(ctx, req.(*GetCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetCharacters(ctx, req.(*GetCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetCharactersForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetCharactersForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetCharactersForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetCharactersForUser(ctx, req.(*GetUserCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).CreateCharacter(ctx, req.(*CreateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_DeleteCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.TargetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).DeleteCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_DeleteCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).DeleteCharacter(ctx, req.(*pb.TargetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_EditCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).EditCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_EditCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).EditCharacter(ctx, req.(*EditCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_AddCharacterPlayTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).AddCharacterPlayTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_AddCharacterPlayTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).AddCharacterPlayTime(ctx, req.(*AddPlayTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterService_ServiceDesc is the grpc.ServiceDesc for CharacterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sro.character.CharacterService",
	HandlerType: (*CharacterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacter",
			Handler:    _CharacterService_GetCharacter_Handler,
		},
		{
			MethodName: "GetCharacters",
			Handler:    _CharacterService_GetCharacters_Handler,
		},
		{
			MethodName: "GetCharactersForUser",
			Handler:    _CharacterService_GetCharactersForUser_Handler,
		},
		{
			MethodName: "CreateCharacter",
			Handler:    _CharacterService_CreateCharacter_Handler,
		},
		{
			MethodName: "DeleteCharacter",
			Handler:    _CharacterService_DeleteCharacter_Handler,
		},
		{
			MethodName: "EditCharacter",
			Handler:    _CharacterService_EditCharacter_Handler,
		},
		{
			MethodName: "AddCharacterPlayTime",
			Handler:    _CharacterService_AddCharacterPlayTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sro/character/character.proto",
}
