// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/character-service/pkg/service/inventory.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/dev/sro/character-service/pkg/service/inventory.go -destination=/home/wil/dev/sro/character-service/pkg/service/mocks/inventory.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	inventory "github.com/ShatteredRealms/character-service/pkg/model/inventory"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockInventoryService is a mock of InventoryService interface.
type MockInventoryService struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceMockRecorder
	isgomock struct{}
}

// MockInventoryServiceMockRecorder is the mock recorder for MockInventoryService.
type MockInventoryServiceMockRecorder struct {
	mock *MockInventoryService
}

// NewMockInventoryService creates a new mock instance.
func NewMockInventoryService(ctrl *gomock.Controller) *MockInventoryService {
	mock := &MockInventoryService{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryService) EXPECT() *MockInventoryServiceMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockInventoryService) AddItem(ctx context.Context, characterId *uuid.UUID, item *inventory.ItemInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", ctx, characterId, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockInventoryServiceMockRecorder) AddItem(ctx, characterId, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockInventoryService)(nil).AddItem), ctx, characterId, item)
}

// GetInventory mocks base method.
func (m *MockInventoryService) GetInventory(ctx context.Context, characterId *uuid.UUID) (inventory.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx, characterId)
	ret0, _ := ret[0].(inventory.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockInventoryServiceMockRecorder) GetInventory(ctx, characterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockInventoryService)(nil).GetInventory), ctx, characterId)
}

// RemoveItem mocks base method.
func (m *MockInventoryService) RemoveItem(ctx context.Context, characterId *uuid.UUID, item *inventory.ItemInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", ctx, characterId, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockInventoryServiceMockRecorder) RemoveItem(ctx, characterId, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockInventoryService)(nil).RemoveItem), ctx, characterId, item)
}

// SetInventory mocks base method.
func (m *MockInventoryService) SetInventory(ctx context.Context, characterId *uuid.UUID, arg2 *inventory.Inventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInventory", ctx, characterId, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInventory indicates an expected call of SetInventory.
func (mr *MockInventoryServiceMockRecorder) SetInventory(ctx, characterId, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInventory", reflect.TypeOf((*MockInventoryService)(nil).SetInventory), ctx, characterId, arg2)
}

// SetQuantity mocks base method.
func (m *MockInventoryService) SetQuantity(ctx context.Context, characterId *uuid.UUID, item *inventory.ItemInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuantity", ctx, characterId, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQuantity indicates an expected call of SetQuantity.
func (mr *MockInventoryServiceMockRecorder) SetQuantity(ctx, characterId, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuantity", reflect.TypeOf((*MockInventoryService)(nil).SetQuantity), ctx, characterId, item)
}
