// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/character-service/pkg/repository/character.go
//
// Generated by this command:
//
//	mockgen -source=/home/wil/sro/git/character-service/pkg/repository/character.go -destination=/home/wil/sro/git/character-service/pkg/repository/mocks/character.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	character "github.com/ShatteredRealms/character-service/pkg/model/character"
	pb "github.com/ShatteredRealms/go-common-service/pkg/pb"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCharacterRepository is a mock of CharacterRepository interface.
type MockCharacterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterRepositoryMockRecorder
	isgomock struct{}
}

// MockCharacterRepositoryMockRecorder is the mock recorder for MockCharacterRepository.
type MockCharacterRepositoryMockRecorder struct {
	mock *MockCharacterRepository
}

// NewMockCharacterRepository creates a new mock instance.
func NewMockCharacterRepository(ctrl *gomock.Controller) *MockCharacterRepository {
	mock := &MockCharacterRepository{ctrl: ctrl}
	mock.recorder = &MockCharacterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterRepository) EXPECT() *MockCharacterRepositoryMockRecorder {
	return m.recorder
}

// CreateCharacter mocks base method.
func (m *MockCharacterRepository) CreateCharacter(ctx context.Context, newCharacter *character.Character) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", ctx, newCharacter)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockCharacterRepositoryMockRecorder) CreateCharacter(ctx, newCharacter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockCharacterRepository)(nil).CreateCharacter), ctx, newCharacter)
}

// DeleteCharacter mocks base method.
func (m *MockCharacterRepository) DeleteCharacter(ctx context.Context, characterId *uuid.UUID) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharacter", ctx, characterId)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockCharacterRepositoryMockRecorder) DeleteCharacter(ctx, characterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockCharacterRepository)(nil).DeleteCharacter), ctx, characterId)
}

// DeleteCharactersByOwner mocks base method.
func (m *MockCharacterRepository) DeleteCharactersByOwner(ctx context.Context, ownerId *uuid.UUID) (character.Characters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharactersByOwner", ctx, ownerId)
	ret0, _ := ret[0].(character.Characters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharactersByOwner indicates an expected call of DeleteCharactersByOwner.
func (mr *MockCharacterRepositoryMockRecorder) DeleteCharactersByOwner(ctx, ownerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharactersByOwner", reflect.TypeOf((*MockCharacterRepository)(nil).DeleteCharactersByOwner), ctx, ownerId)
}

// GetCharacter mocks base method.
func (m *MockCharacterRepository) GetCharacter(ctx context.Context, matchFilters map[string]any) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", ctx, matchFilters)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterRepositoryMockRecorder) GetCharacter(ctx, matchFilters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterRepository)(nil).GetCharacter), ctx, matchFilters)
}

// GetCharacters mocks base method.
func (m *MockCharacterRepository) GetCharacters(ctx context.Context, matchFilters map[string]any, queryFilter *pb.QueryFilters, deleted bool) (character.Characters, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacters", ctx, matchFilters, queryFilter, deleted)
	ret0, _ := ret[0].(character.Characters)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharacters indicates an expected call of GetCharacters.
func (mr *MockCharacterRepositoryMockRecorder) GetCharacters(ctx, matchFilters, queryFilter, deleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacters", reflect.TypeOf((*MockCharacterRepository)(nil).GetCharacters), ctx, matchFilters, queryFilter, deleted)
}

// UpdateCharacter mocks base method.
func (m *MockCharacterRepository) UpdateCharacter(ctx context.Context, updatedCharacter *character.Character) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCharacter", ctx, updatedCharacter)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCharacter indicates an expected call of UpdateCharacter.
func (mr *MockCharacterRepositoryMockRecorder) UpdateCharacter(ctx, updatedCharacter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharacter", reflect.TypeOf((*MockCharacterRepository)(nil).UpdateCharacter), ctx, updatedCharacter)
}
